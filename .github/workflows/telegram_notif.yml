name: Telegram Notification & Build APK & Release

on:
  push:
    branches: [main]
    tags:
      - "v*" # Trigger jika ada push tag seperti v1.0.0, v1.0.1, dll

jobs:
  send_notification:
    runs-on: ubuntu-latest
    outputs:
      commit_message_id: ${{ steps.send_commit_notification.outputs.message_id }}
    steps:
      - name: Send Telegram Notification (New Commit)
        id: send_commit_notification
        uses: actions/github-script@v6
        with:
          script: |
            const token = '${{ secrets.TELEGRAM_BOT_TOKEN }}';
            const chatId = '${{ secrets.TELEGRAM_CHAT_ID }}';

            let message;
            if (context.eventName === 'push' && context.payload.ref.startsWith('refs/tags/')) {
              const tagName = context.payload.ref.replace('refs/tags/', '');
              message = `🎉 *Rilis Baru!* 🎉\n\n🏷️ *Tag:* ${tagName}\n🚀 Build akan dimulai...`;
            } else {
              message = `🚀 *Commit Baru Terdeteksi!* 🚀\n\n📌 *Branch:* ${context.ref.replace('refs/heads/', '')}\n📝 *Pesan Commit:* \n${context.payload.head_commit.message}\n🔗 [Lihat Commit](${context.payload.head_commit.url})\n👤 *Dikirim oleh:* ${context.payload.pusher.name}`;
            }

            const res = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: 'Markdown' })
            });

            const sentMessage = await res.json();
            core.setOutput("message_id", sentMessage.result.message_id);

  build_apk:
    needs: send_notification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch semua tag agar bisa dirilis

      - name: Send Telegram Notification (Build Started)
        id: send_build_notification
        uses: actions/github-script@v6
        with:
          script: |
            const token = '${{ secrets.TELEGRAM_BOT_TOKEN }}';
            const chatId = '${{ secrets.TELEGRAM_CHAT_ID }}';
            const buildMessage = `🔄 *Proses:* Build APK sedang berjalan... ⏳`;

            const res = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ chat_id: chatId, text: buildMessage, parse_mode: 'Markdown' })
            });

            const sentMessage = await res.json();
            core.setOutput("build_message_id", sentMessage.result.message_id);

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"

      - name: Install Dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # Hanya jalan kalau ada tag baru
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/app-release.apk
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}

      - name: Update Telegram Status (Release Done)
        uses: actions/github-script@v6
        with:
          script: |
            const token = '${{ secrets.TELEGRAM_BOT_TOKEN }}';
            const chatId = '${{ secrets.TELEGRAM_CHAT_ID }}';
            const messageId = '${{ steps.send_build_notification.outputs.build_message_id }}';
            const repo = context.repo.owner + '/' + context.repo.repo;
            const tagName = context.ref.replace("refs/tags/", "");
            const apkUrl = `https://github.com/${repo}/releases/download/${tagName}/app-release.apk`;
            const releaseUrl = `https://github.com/${repo}/releases/tag/${tagName}`;

            const finalMessage = `✅ *Build Selesai!* 🎉\n\n📥 *[Download APK](${apkUrl})*\n🔗 *[Lihat Release](${releaseUrl})*`;

            if (messageId) {
              await fetch(`https://api.telegram.org/bot${token}/editMessageText`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  chat_id: chatId,
                  message_id: messageId,
                  text: finalMessage,
                  parse_mode: 'Markdown'
                })
              });
            } else {
              await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: chatId, text: finalMessage, parse_mode: 'Markdown' })
              });
            }
