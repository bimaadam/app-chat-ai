name: Telegram Notification & Build APK & Release

on:
  push:
    branches: [main]
    tags: # Trigger on tag pushes as well
      - "v*" # Example: triggers on tags like v1.0.0, v1.0.1, etc.

jobs:
  send_notification:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        uses: actions/github-script@v6
        with:
          script: |
            const token = '${{ secrets.TELEGRAM_BOT_TOKEN }}';
            const chatId = '${{ secrets.TELEGRAM_CHAT_ID }}';

            if (context.eventName === 'push' && context.ref.startsWith('refs/tags/')) {
              const tagName = context.ref.replace('refs/tags/', '');
              const message = `🎉 *Rilis Baru!* 🎉\n\n🏷️ *Tag:* ${tagName}\n🚀 Aplikasi telah di-build dan di-release!\n\n👤 *Dikirim oleh:* ${{ github.actor }}`;

              await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: 'Markdown' })
              });

            } else {
              const message = `🚀 *Commit Baru!* 🚀\n\n📌 *Branch:* ${{ github.ref }}\n📝 *Commit:* \n${{ github.event.head_commit.message }}\n🔗 [Lihat Commit](${{ github.event.head_commit.url }})\n👤 *Dikirim oleh:* ${{ github.actor }}`;

              await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: chatId, text: message, parse_mode: 'Markdown' })
              });
            }

  build_apk:
    needs: send_notification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper tag handling

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1" # Replace with your Flutter version

      - name: Install Dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # Hanya jalan kalau ada tag baru
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/app-release.apk
          generate_release_notes: true # Auto buat catatan rilis
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }} # Pakai token bawaan GitHub
